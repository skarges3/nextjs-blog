
    <rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0">
      <channel>
        <title>From the Desk of Spencer Karges</title>
        <link>https://www.karges.org</link>
        <description>Thoughts on sundry topics, including but not limited to web development, CSS, HTML, and sometimes public policy?</description>
        <language>en</language>
        <lastBuildDate>Sat, 01 Oct 2022 00:00:00 GMT</lastBuildDate>
        <atom:link href="https://www.karges.org" rel="self" type="application/rss+xml"/>
        
    <item>
      <guid>https://www.karges.org/posts/stop-using-themekit-for-shopify-theme-development</guid>
      <title>Stop Using Themekit for Shopify Theme Development</title>
      <description>There is a better way.</description>
      <link>https://www.karges.org/posts/stop-using-themekit-for-shopify-theme-development</link>
      <pubDate>Sat, 01 Oct 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>Having worked with Shopify for the past 5 or 6 years, I can confidently say that things are changing at a faster pace than ever.</p>
<p>The sheer number of releases and updates from the Shopify team have been hard to keep up with, even for someone who subscribes to their changelog via RSS.</p>
<p>So I say the following with no judgment: you should really try and keep up. Yes, there is a cost to changing your ways, but there is also a cost to sticking with them.</p>
<p>A glaring example of this is Shopify Themekit vs Shopify CLI. Both tools are ostensibly for developers to be able to work with hosted themes from their local machine via Command Line, but the newer tool solves many problems that developers might not even know they have.</p>
<h2 id="why-themekit-persists"><a aria-hidden="true" tabindex="-1" href="#why-themekit-persists"><span class="icon icon-link"></span></a>Why Themekit Persists</h2>
<p>Since the release of Shopify CLI 2.0 (which allows for theme development) in June 2021, there has been a slow adoption of it in place of Themekit. Partially, I think this slow adoption is just inertia and things will eventually change in time. But one headwind against change is the sheer amount of shovel-blog writing on "How to use Themekit to build Shopify Themes" style posts and YouTube tutorials. They are everywhere, and when people Google for advice they are more likely — even today — to come across a Themekit-based solution.</p>
<p>Oddly enough, Shopify themselves are a little reluctant to just give people direct advice on making the switch. Their current Themekit documentation does not mark the tool as deprecated, nor does it even attempt to dissuade developers from using it:</p>
<blockquote>
<p>Choosing between Shopify CLI and Theme Kit: Shopify CLI replaces Theme Kit for most Shopify theme development tasks. You should use Shopify CLI if you're working on Online Store 2.0 themes. You should use Theme Kit instead of Shopify CLI only if you're working on older themes.
Source: https://shopify.dev/themes/tools/theme-kit</p>
</blockquote>
<p>I think this is bad advice, and I will lay out my reasons for it below.</p>
<h2 id="the-issues-with-themekit"><a aria-hidden="true" tabindex="-1" href="#the-issues-with-themekit"><span class="icon icon-link"></span></a>The issues with Themekit</h2>
<p>Themekit has been around for a long time, and was the original way I learned to build and manage themes. The <code>theme watch</code> command felt like magic the first time I ran it. I'm afraid the fun stops there though.</p>
<h3 id="1-themekit-often-uses-private-apps-for-authentication"><a aria-hidden="true" tabindex="-1" href="#1-themekit-often-uses-private-apps-for-authentication"><span class="icon icon-link"></span></a>1. Themekit often uses private apps for authentication</h3>
<p>Private apps are now deprecated but many still exist because they were grandfathered in on stores that had access to them previously.</p>
<p>Private apps allow for simple HTTPS authentication via app name and password. This is generally just a bad idea because it could give someone with the credentials access to your entire store. I've defeinitely never had to speak to a lawyer because a hacker found the keys and had all order history from all customers ever... Definitely not me...</p>
<p>I have seen many, many stores where the only reason private apps have stuck around is because of developers' need for Themekit access.</p>
<p>There is an alternative for this called <a href="https://apps.shopify.com/theme-kit-access" target="_blank" rel="noreferrer noopener">Themekit Access</a> which is an app on the Shopify App Store. This definitely alleviates the security concern, but there are still a lot more reasons to leave Themekit behind.</p>
<h2 id="2-themekit-encourages-partial-syncing"><a aria-hidden="true" tabindex="-1" href="#2-themekit-encourages-partial-syncing"><span class="icon icon-link"></span></a>2. Themekit encourages partial syncing</h2>
<p>This one is my pet peeve. The <code>theme watch</code> command is probably the most popular command by a factor of 10. It's the easiest way, as a developer, to just start making changes and getting visual feedback.</p>
<p>The problem is that once you are in <code>watch</code> mode, only the files you change and save are watched and synced. This means that if you are starting from a code base that is not 100% synced to the theme you are working with in Shopify, you will be <code>watch</code>-ing  for changes to your local files, but other files in your codebase are not in sync with the hosted theme and you are not developing against your real environment.</p>
<p>This causes much confusion and often results in a developer looking at their codebase and wondering why the theme they are previewing on Shopify isn't working as expected.</p>
<h2 id="enter-cli"><a aria-hidden="true" tabindex="-1" href="#enter-cli"><span class="icon icon-link"></span></a>Enter CLI</h2>
<p>The Shopify CLI on the other hand, uses the <code>shopify theme serve</code> command which brings similar benefits as <code>theme watch</code>. The main difference here is that as soon as you <code>serve</code> you are immediate syncing the <strong>entire</strong> local theme directory with the hosted dev theme. Nothing is out of sync.</p>
<h3 id="other-benefits"><a aria-hidden="true" tabindex="-1" href="#other-benefits"><span class="icon icon-link"></span></a>Other benefits</h3>
<h4 id="1-local-development"><a aria-hidden="true" tabindex="-1" href="#1-local-development"><span class="icon icon-link"></span></a>1. Local development</h4>
<p>All Shopify themes are hosted, so there is no real local environment, but Shopify CLI gets as close as possible by proxying the dev theme via your local IP (e.g. 127.0.0.1).</p>
<p>This means live reloading typically works really well.</p>
<h4 id="2-syncing-with-the-theme-editor"><a aria-hidden="true" tabindex="-1" href="#2-syncing-with-the-theme-editor"><span class="icon icon-link"></span></a>2. Syncing with the Theme Editor</h4>
<p>The Theme Editor is even more crucial in Shopify 2.0 themes. Testing it's settings and playing with configurations is a daily task for most theme developers. The <code>--theme-editor-sync</code> flag on the <code>shopify theme serve</code> command allows for a really seamless workflow where you can make editor changes via the Customizer and have those changes automatically synced to your local code base.</p>
<h4 id="3-better-auth"><a aria-hidden="true" tabindex="-1" href="#3-better-auth"><span class="icon icon-link"></span></a>3. Better auth</h4>
<p>Shopify CLI does away with Private apps and Themekit Access and instead just allows for logging in via web OAuth. It's a lot safer and lot easier.</p>
<h4 id="4-pushing-and-pulling"><a aria-hidden="true" tabindex="-1" href="#4-pushing-and-pulling"><span class="icon icon-link"></span></a>4. Pushing and Pulling</h4>
<p>Here's a common workflow for me:</p>
<ol>
<li>Create a new theme via the Shopify admin, and name it something appropriate like <code>Sticky Add-to-Cart Button</code></li>
<li>Create a new branch in my local off of <code>master</code> called <code>feature/sticky-atc</code> for example</li>
<li>Immediately run <code>shopify theme pull</code> from the <strong>Live Theme</strong> and check for any changes in git. There should be <strong>zero</strong>, and that gives me confidence that I am in sync with the published theme before adding new changes. Or it tells me something has gone wrong and I should get in sync before moving forward.</li>
<li>Run <code>shopify theme push</code>, and push to the new theme I made.</li>
<li>Run <code>shopify theme serve --theme-editor-sync</code> and do my work.</li>
<li>Once I am done, or am ready for testing I will commit to my repo and <code>push</code> to my named theme again.</li>
</ol>
<p>Now I have a fully-in-sync unpublished theme that contains only the changes related to my new feature.</p>
<p>The <code>pull</code> and <code>push</code> commands are the bread and butter and really easy to use.</p>
<h2 id="conclusion"><a aria-hidden="true" tabindex="-1" href="#conclusion"><span class="icon icon-link"></span></a>Conclusion</h2>
<p>The Shopify CLI might not seem like a big departure from Themekit if you haven't tried it yet, but I would encourage you to take advantage of the new tools and workflows. It has made my life a lot easier and — maybe most importantly — made it a lot smoother to work with other developers when we're all using the same modern tools.</p>
<p>Happy theming ❤️</p>]]></content:encoded>
    </item>
  
    <item>
      <guid>https://www.karges.org/posts/hard-byes-are-good-byes</guid>
      <title>Hard Byes are Good Byes</title>
      <description>A note before I go.</description>
      <link>https://www.karges.org/posts/hard-byes-are-good-byes</link>
      <pubDate>Sat, 21 May 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>I've had to say goodbye a lot in my life. To friends, to places, to homes, to jobs.</p>
<p>Well maybe I haven't had to say goodbye any more than the average person, but enough to learn something a few times over: one should be grateful when goodbyes are hard, because the alternative is a lot worse.</p>
<p>Today I'm saying goodbye to SMAKK Studios, where I've spent most of my waking hours for the past few years. I have left jobs before where I was just counting down the moments until the last shift was over, but this one is different. I know that's only because of the really great people I've worked, laughed, vented, drank, and karaoked with. Not to mention the awesome and rewarding work we've put out into the world.</p>
<p>Our team helped clients <a href="http://truffleco.com" target="_blank" rel="noreferrer noopener">sell in style</a>, <a href="https://www.creativesolutions.net" target="_blank" rel="noreferrer noopener">showcase swag</a>, and even <a href="https://legacyquiltproject.mofad.org" target="_blank" rel="noreferrer noopener">honor African American culinary history</a>. In two years, my team grew from myself to 4 people. I became a manager for the first time and it made me realize how rewarding it can be to mentor younger folks.</p>
<p>Like most people, the last few years were pretty tough for me. But being able to work on these projects with these bright, caring, talented people helped me stay sane and grounded (for the most part). I've learned so much from all of them.</p>
<p>In two weeks I'll be starting as a Technical Lead at <a href="https://corra.com" target="_blank" rel="noreferrer noopener">Corra</a>. I'm really excited for a new challenge and a new adventure, but it's hard to say goodbye to SMAKK — and for that, I'm grateful.</p>]]></content:encoded>
    </item>
  
    <item>
      <guid>https://www.karges.org/posts/metabulk-shopify-metafield-bulk-edit-generator</guid>
      <title>Metabulk: A Shopify Metafields Bulk Edit Link Generator</title>
      <description>Trying to make my life easier by building my own tools.</description>
      <link>https://www.karges.org/posts/metabulk-shopify-metafield-bulk-edit-generator</link>
      <pubDate>Sat, 14 May 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>My day job revolves around Shopify, the ecommerce behemoth that <a href="https://twitter.com/michaelbatnick/status/1524481965897957376?s=21&#x26;t=qz_kEQsbNRlIwjOhewM0_A" target="_blank" rel="noreferrer noopener">some people think</a> is the weather vane of the post-COVID economy.</p>
<p>But I am nor a mover, nor a shaker, so my concern is less with its macroeconomic effects and more with the platform itself. Sometimes this means tedious things like "how do I update every product's subtitle at once so I don't have to spend all day clicking around?".</p>
<p>If you have every managed or worked on a Shopify store, you are probably familiar with how cumbersome if can be to edit metafields in a bulk way without an app.</p>
<p>I prefer to not use an app for metafields, and instead go with Shopify's <a href="https://changelog.shopify.com/posts/metafield-improvements-metafield-lists" target="_blank" rel="noreferrer noopener">increasingly robust native metafields</a>. They are great, but Shopify currently makes it a hassle to edit these field values in bulk.</p>
<p>Enter <a href="https://metabulk.karges.org" target="_blank" rel="noreferrer noopener">Metabulk</a>, a simple little app that helps you create a link that you can plop into a browser and see multiple metafields as columns, and all your objects (read products or collections) as rows.</p>
<p>In addition to <a href="/posts/hello-world">trying to learn in public</a>, I'm also trying to adopt the mindset of building my own tools if I can't find a good alternative.</p>
<p>It's super basic, and I would love for Shopify to make this obsolete, but for now I have found it very useful. I built it with my favorite stack: <a href="/posts/not-another-tailwind-post">Tailwind CSS</a> + Alpine JS. <a href="https://htmx.org/essays/locality-of-behaviour?ref=karges" target="_blank" rel="noreferrer noopener">LOB</a> FTW.</p>
<p>Check it out and let me know if it helps you!</p>
<p><a href="https://metabulk.karges.org" target="_blank" rel="noreferrer noopener">View the project here.</a></p>]]></content:encoded>
    </item>
  
    <item>
      <guid>https://www.karges.org/posts/out-of-the-headwind</guid>
      <title>Out of the Headwind</title>
      <description>The Tailwind team was on it, and I just didn't notice.</description>
      <link>https://www.karges.org/posts/out-of-the-headwind</link>
      <pubDate>Sat, 12 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>Following up on <a href="/posts/into-the-headwind">a recent post about Headwind</a>: some new developments in this space.</p>
<p>God bless RSS is all I have to say. If it weren't for that reliable feed, I would not have noticed that the Tailwind team posted this great update on <a href="https://tailwindcss.com/blog/automatic-class-sorting-with-prettier" target="_blank" rel="noreferrer noopener">Automatic Class Sorting with Prettier</a>. Their post predates my post on Headwind :)</p>
<h2 id="the-good"><a aria-hidden="true" tabindex="-1" href="#the-good"><span class="icon icon-link"></span></a>The Good</h2>
<p>The advantages over Headwind are pretty obvious, I think:</p>
<ul>
<li>Integration with a larger ecosystem</li>
<li>Support from the official Tailwind team</li>
<li>Most importantly: a uniform class order across the web</li>
</ul>
<p>The first two there are pretty obvious, but I think this last one has the potential to help the Tailwind ecosystem really mature. For example, when I use Tailwind on a project and invite another developer into it, I can definitely add a <code>.vscode</code> folder to the repo with Headwind as a recommendation in <code>extensions.json</code>:</p>
<pre><code class="language-json">// .vscode/extensions.json
{
  "recommendations": [
    "heybourn.headwind"
  ]
}
</code></pre>
<p>And then in <code>settings.json</code>:</p>
<pre><code class="language-json">// .vscode/settings.json
{
  // ...other stuff...
  // These settings help standardize Headwind.
  "headwind.prependCustomClasses": true,
  "headwind.runOnSave": true
}
</code></pre>
<p>Whereas the set-up requires VSCode and some non-standard settings, the Prettier version, as Adam and Jonathan put it:</p>
<blockquote>
<p>...works seamlessly with custom Tailwind configurations, and because it’s just a Prettier plugin, it works anywhere Prettier works — including every popular editor and IDE, and of course on the command line.</p>
</blockquote>
<p>🎉 Thanks Tailwind team!</p>
<h2 id="the-not-as-good-yet"><a aria-hidden="true" tabindex="-1" href="#the-not-as-good-yet"><span class="icon icon-link"></span></a>The Not-as-Good-Yet</h2>
<p>This is new, so there are plenty of kinks to work out. The main issue I'm experiencing at the moment is <a href="https://github.com/tailwindlabs/prettier-plugin-tailwindcss/issues/31" target="_blank" rel="noreferrer noopener">incompatibility with other Prettier plugins</a>, specifically the <code>prettier-plugin-twig-melody</code> plugin since I'm working on a Twig-based project. I'm sure that'll be patched up soon, but just something to keep in mind before you make the switch.</p>
<p>Really excited about making this part of using Tailwind smoother and more consistent.</p>]]></content:encoded>
    </item>
  
    <item>
      <guid>https://www.karges.org/posts/into-the-headwind</guid>
      <title>Into the Headwind</title>
      <description>How to stay sane with Tailwind Class Soup, especially if you're working on a team.</description>
      <link>https://www.karges.org/posts/into-the-headwind</link>
      <pubDate>Tue, 01 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>As <a href="/posts/not-another-tailwind-post">mentioned before,</a>, I really like Tailwind CSS.</p>
<p>One of the downsides that I have encountered is the class soup that can occur. For example:</p>
<p><code>&#x3C;div class="relative after:absolute after:left-0 after:bottom-0 after:w-full after:content-[''] after:bg-black after:h-px after:scale-x-0 hover:after:scale-x-50 after:transition-transform">&#x3C;/div></code></p>
<p>There really is no way around this type of thing if you want to use Tailwind. Again, I think it's still worth it but one small way to mitigate this is to enforce some rules for the order of the class names.</p>
<p>The tool for this job is a VS Code Extension called <a href="https://github.com/heybourn/headwind" target="_blank" rel="noreferrer noopener">Headwind</a>.</p>
<p>It works by re-ordering your classes on save according to a preset order (which is configurable).</p>
<p>It will also remove duplicates!</p>
<p>Thanks to the Headwind team for this little tool. &#x3C;3</p>]]></content:encoded>
    </item>
  
    <item>
      <guid>https://www.karges.org/posts/not-another-tailwind-post</guid>
      <title>Not Another "Why I Like Tailwind" Post</title>
      <description>A cover song of a cover song.</description>
      <link>https://www.karges.org/posts/not-another-tailwind-post</link>
      <pubDate>Sun, 30 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>As previously advised, don't listen to me because <a href="/posts/hello-world">I do not know what I think or what I am doing</a>. So for my first foray into this type of webdev writing, I'm gonna cover a modern classic: the Tailwind take.</p>
<p>There are already <a href="https://ishadeed.com/article/on-tailwindcss/" target="_blank" rel="noreferrer noopener">too</a> <a href="https://macarthur.me/posts/why-i-like-tailwind-css" target="_blank" rel="noreferrer noopener">many</a> <a href="https://dev.to/jaredcwhite/why-tailwind-isn-t-for-me-5c90" target="_blank" rel="noreferrer noopener">of</a> <a href="https://www.viget.com/articles/what-i-love-hate-about-tailwind-css/" target="_blank" rel="noreferrer noopener">these</a> <a href="https://highlandsolutions.com/blog/how-i-quit-worrying-and-learned-to-love-tailwindcss" target="_blank" rel="noreferrer noopener">posts</a> (and rebuttals, and rebuttals to the rebuttals) to the point that they have become the "Anyway, here's Wonderwall" of dev articles. I'm not sure if there's a lot left to say, but this is a loud, crowded venue and I've gotta play something so, anyway, here's Wonderwall.</p>
<h2 id="one-framework-to-rule-them-all"><a aria-hidden="true" tabindex="-1" href="#one-framework-to-rule-them-all"><span class="icon icon-link"></span></a>One "framework" to rule them all?</h2>
<p>Tailwind is fast becoming the dominant CSS "framework" (see chart below), though I think "framework" is a bit of a misnomer. I think it's really more of a <em>utility library</em>.</p>
<p>Library: "Here are some tiny building blocks." <em>vs.</em> Framework: "Here are some components that you can re-skin."</p>
<figure class="rehype-figure"><img src="/posts/tailwind-chart.png" alt="A chart from &#x22;The State of CSS: 2021&#x22; showing Tailwind adoption on the rise, with 6% adoption in 2019, 26% in 2020, and 39% in 2021. Source: https://2021.stateofcss.com/en-US/technologies/css-frameworks"><figcaption>A chart from "The State of CSS: 2021" showing Tailwind adoption on the rise, with 6% adoption in 2019, 26% in 2020, and 39% in 2021. Source: https://2021.stateofcss.com/en-US/technologies/css-frameworks</figcaption></figure>
<p>The Tailwind team (or maybe just whoever wrote the copy for their new site) calls it a <a href="https://tailwindcss.com/" target="_blank" rel="noreferrer noopener">"utility-first CSS framework"</a>, but I think that's just a word-of-least-resistance.</p>
<p>In my mind, a "framework" is opinionated to the extent that you stop having to think about composing an interface and skip right to thinking about content and style. As an example, I would expect a framework to have a <code>.btn</code> class built in, while a utility library would force you to compose a <code>.btn</code> class or component using utility styles.</p>
<p>One could argue that the preselected colors, spacing units, and shadows that Tailwind creates are constrained enough to warrant using the term "framework", but with <code>tailwind.config.js</code> and the new <a href="https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values" target="_blank" rel="noreferrer noopener">arbitrary values</a> feature, we are sort of outside the realm of a framework and really just doing "inline styles on steroids (i.e. media queries and pseudo elements allowed) + some constraints".</p>
<h2 id="enough-about-semantics"><a aria-hidden="true" tabindex="-1" href="#enough-about-semantics"><span class="icon icon-link"></span></a>Enough about semantics</h2>
<p>JK <a href="https://hiddedevries.nl/en/blog/2022-01-23-more-to-give-than-just-the-div-semantics-and-how-to-get-them-right" target="_blank" rel="noreferrer noopener">semantics are really fun and important actually</a>. But let's get to what I like I about Tailwind:</p>
<p>The pros, in short:</p>
<ol>
<li><a href="#reducing-complexity-when-debugging">Reducing complexity when debugging</a></li>
<li><a href="#speed-of-composition">Speed of composition</a></li>
<li><a href="#performance">Performance</a></li>
</ol>
<p>Let's dive a little deeper:</p>
<h3 id="reducing-complexity-when-debugging"><a aria-hidden="true" tabindex="-1" href="#reducing-complexity-when-debugging"><span class="icon icon-link"></span></a>Reducing complexity when debugging</h3>
<p>Let's say you've got a modal component and you can't figure out why the hell your "Close Modal" button is being obscured by some other piece of content on the page. It's probably a <code>z-index</code> thing, but you're not sure so you go hunting in some css files.</p>
<p>With Tailwind, there are two reasons why you might find the issue more quickly:</p>
<ol>
<li>
<h4 id="you-probably-dont-have-to-open-another-file"><a aria-hidden="true" tabindex="-1" href="#you-probably-dont-have-to-open-another-file"><span class="icon icon-link"></span></a>You probably don't have to open another file.</h4>
<p>All of your classes are right there in the HTML. Sure, you may have to open another component or template, but that's the case no matter what. You are at least removing one place for the bug to hide.</p>
</li>
<li>
<h4 id="you-have-a-limited-set-of-z--classes-that-could-be-in-play"><a aria-hidden="true" tabindex="-1" href="#you-have-a-limited-set-of-z--classes-that-could-be-in-play"><span class="icon icon-link"></span></a>You have a limited set of <code>z-</code> classes that could be in play.</h4>
<p>There are only 5 (unless you use arbitrary values) <code>z-</code> classes, all with fairly low values so it should be pretty easy to search your codebase for those classes and find the conflict. No <code>z-index: 9999</code> here.</p>
</li>
</ol>
<h3 id="speed-of-composition"><a aria-hidden="true" tabindex="-1" href="#speed-of-composition"><span class="icon icon-link"></span></a>Speed of composition</h3>
<p>Maybe it's just me, but being able to compose my HTML and start styling in the same file means I can create layouts fluently. The feedback is more immediate and there is no file-switching to slow me down.</p>
<h3 id="performance"><a aria-hidden="true" tabindex="-1" href="#performance"><span class="icon icon-link"></span></a>Performance</h3>
<p>This comes up in almost every article on Tailwind but it bears repeating: Tailwind when used properly will reduce the size of the CSS you ship. The main reason for this is that in a non-Tailwind project you will almost certainly write <code>display: flex</code> close to a bajillion times. That is unnecessary bloat in the size of the css (though I am sure this could be solved by some CSS-in-JS strategies or code splitting).</p>
<h2 id="cons"><a aria-hidden="true" tabindex="-1" href="#cons"><span class="icon icon-link"></span></a>Cons</h2>
<p>The cons, in short:</p>
<ol>
<li><a href="#ugly-long-class-lists">Ugly, long class lists</a></li>
<li><a href="#the-inevitable-bailwind">The inevitable Bailwind</a></li>
<li><a href="#obscuring-vanilla-css">Obscuring vanilla CSS</a></li>
</ol>
<h3 id="ugly-long-class-lists"><a aria-hidden="true" tabindex="-1" href="#ugly-long-class-lists"><span class="icon icon-link"></span></a>Ugly, long class lists</h3>
<p>It's just simply objectively uglier to look at:</p>
<pre><code>&#x3C;section class="md:p-8 dark:bg-blue-100 dark:text-blue-100 p-4 text-blue-100 bg-blue-900">&#x3C;/section>
</code></pre>
<p>than:</p>
<pre><code>&#x3C;section class="section section--blue">&#x3C;/section>
</code></pre>
<p>And all of those classes can start to look like alphabet soup. I have recently started using the <a href="https://github.com/heybourn/headwind" target="_blank" rel="noreferrer noopener">Headwind VS Code extension</a> that helps auto-sort the classes to make your class lists more consistent and legible.</p>
<p>📌 Update: Check out <a href="/posts/into-the-headwind">my new post on Headwind here</a>.</p>
<h3 id="the-inevitable-bailwind"><a aria-hidden="true" tabindex="-1" href="#the-inevitable-bailwind"><span class="icon icon-link"></span></a>The inevitable "Bailwind"</h3>
<p>Behind every good Tailwind project is a sad "<a href="(https://twitter.com/ryanflorence/status/1251589516617379840)">bailwind</a>" file. A.k.a. a junk drawer with all the random styles that just don't fit, or classes that regenerated by a CMS (e.g. <code>.shopify-policy__title</code> to target the legal pages in a Shopify theme or a <code>.wp-block</code> class in a Wordpress theme).</p>
<p>The "con" here is just that this is one more place to look to debug your CSS. Let me suggest that if this file gets sufficiently big you might want to rethink using Tailwind on that project.</p>
<h3 id="obscuring-vanilla-css"><a aria-hidden="true" tabindex="-1" href="#obscuring-vanilla-css"><span class="icon icon-link"></span></a>Obscuring vanilla CSS</h3>
<p>In my day job, I lead a small dev team that includes two other, more junior devs. For the most part, I get to decide on the technologies we use. So when I chose Tailwind for our main projects, I was nervous that I was basically teaching them a foreign language, but only the slang. Or teaching them how to paint like Jackson Pollock while skipping Intro to Light and Shadow.</p>
<p>It might be that focusing so much on Tailwind and its shortcuts (like <code>scale-110</code> ) might obscure what the underlying CSS properties at play really are (<code>transform: scale(1.1)</code>). I even see it with myself when I Inspect Element and I've only been dealing with Tailwind classes all day, I start to have brain farts where I type <code>items-center</code> instead of <code>align-items: center</code>.</p>
<p>There is also a tendency, for me at least, to assume that any Tailwind class has nearly-full browser support. If you are using Tailwind in Chrome, you are living in the best-case scenario and as developers, it is not our job to write code for the best-case scenario. Not all browsers support <code>scroll-behavior: smooth</code> or <code>::marker</code>, but you might forget that if you are using Tailwind. I think it's still the right call to include these widely-but-not=fully-adopted properties because they are good and gracefully fail, but more than once it has tripped me up so I wanted to include it.</p>
<p>All in all though, I feel like this is simply something to watch out for and take time to understand which CSS properties each class is utilizing.</p>
<h2 id="conclusion"><a aria-hidden="true" tabindex="-1" href="#conclusion"><span class="icon icon-link"></span></a>Conclusion</h2>
<p>Tailwind is a useful abstraction on top of CSS that helps developers quickly compose layouts. The pros outweigh the cons but I am open to changing my mind. Specifically, I'd love to work on some larger-scale projects to see how <em>really</em> big codebases might handle it.</p>
<p>If you made it this far, God bless you child. And hope to see you next time.</p>]]></content:encoded>
    </item>
  
    <item>
      <guid>https://www.karges.org/posts/hello-world</guid>
      <title>Hello World</title>
      <description>What do I know? Well that's what I hope to find out.</description>
      <link>https://www.karges.org/posts/hello-world</link>
      <pubDate>Sat, 29 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>I write entirely to find out what I'm thinking, what I'm looking at, what I see and what it means. What I want and what I fear.</p>
</blockquote>
<p>— Joan Didion</p>
<p>I want to learn in public. Better yet, I want to fail in public. The only way I can see to do that is to make things for public consumption to find out if others find it useful and engaging.</p>
<p>I have not yet narrowed down what the scope of these posts might be, so to begin with, I might have quite a few odds and ends mixed in. "What are the odds and ends vs. what is the prime rib?" you might ask. Only time will tell. "Will my metaphors become less tortured?" Probably not.</p>
<p>Bon appétit.</p>
<p>(<a href="/posts/not-another-tailwind-post">Start here with the next post.</a>)</p>]]></content:encoded>
    </item>
  
      </channel>
    </rss>
  